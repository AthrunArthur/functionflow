PROJECT(FF_BENCHMARK)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
MESSAGE(STATUS "This is BINARY dir" ${PROJECT_BINARY_DIR})
MESSAGE(STATUS "This is SOURCE dir" ${PROJECT_SOURCE_DIR})
add_definitions(-std=c++11)

add_definitions(-DUSING_LOCK_FREE_QUEUE)
#add_definitions(-DUSING_MIMO_QUEUE)
#add_definitions(-DUSING_FF_SPIN_STEAL_QUEUE)

if(Debug)
add_definitions(-g)
	message(STATUS "This is a Debug version!")
	add_definitions(-g)
	add_definitions(-DFUNCTION_FLOW_DEBUG)
	include_directories(${PROJECT_SOURCE_DIR}/../libs)
else(Debug)
	message(STATUS "This is a Release version!")
	add_definitions(-g)
	add_definitions(-O2)
	#	add_definitions(-finline-functions)
	#	add_definitions(-funswitch-loops)
	#	add_definitions(-fpredictive-commoning)
	#	add_definitions(-fgcse-after-reload)
	#	add_definitions(-ftree-slp-vectorize)
	#	add_definitions(-fvect-cost-model)
	#	add_definitions(-ftree-partial-pre)
	#	add_definitions(-fipa-cp-clone)
	# Error!
	#	add_definitions(-ftree-loop-vectorize)
	add_definitions(-DNDEBUG)
	
	#add_definitions(-DFUNCTION_FLOW_DEBUG)
	#include_directories(${PROJECT_SOURCE_DIR}/../libs)
endif(Debug)

include_directories(${PROJECT_SOURCE_DIR}/../ff/include)		
SET(LIBS_LINK_DIRS ${PROJECT_SOURCE_DIR}/../bin)
LINK_DIRECTORIES(${LIBS_LINK_DIRS})
SET(LIBS ff pthread)

if(LU OR All)
  message(STATUS "Building LU...")
  SET(LU_LIST LU/ff/lu_main.cpp)
  ADD_EXECUTABLE(lu ${LU_LIST})  
  TARGET_LINK_LIBRARIES(lu ${LIBS} papi)
endif(LU OR All)

if(QS OR All)
  message(STATUS "Building quick_sort...")
  SET(QS_LIST quick_sort/ff/quick_sort.cpp)
  ADD_EXECUTABLE(quicksort ${QS_LIST})
  TARGET_LINK_LIBRARIES(quicksort ff pthread papi)
endif(QS OR All)

if(CANNY OR All)
  message(STATUS "Building canny...")
  SET(CANNY_LIST canny/ff/run_canny.cpp
		canny/ff/canny_edge_detector.cpp)

  find_package(wxWidgets COMPONENTS core base REQUIRED)
  include( "${wxWidgets_USE_FILE}")		
  ADD_EXECUTABLE(canny ${CANNY_LIST})
  TARGET_LINK_LIBRARIES(canny ${wxWidgets_LIBRARIES} ff pthread papi)
endif(CANNY OR All)

if(KMEANS OR All)
  message(STATUS "Building kmeans...")
  SET(KMEANS_LIST kmeans/ff/main.cpp
		kmeans/ff/Lloyd.cpp
		kmeans/ff/point.cpp)
  ADD_EXECUTABLE(kmeans ${KMEANS_LIST})
  TARGET_LINK_LIBRARIES(kmeans ff pthread papi) 
endif(KMEANS OR All)

#if(PBZIP OR All)
#  message(STATUS "Building pbzip2...")
#  SET(PBZIP_LIST pbzip/ff/main.cpp)
#  find_package (BZip2 REQUIRED)
#  include_directories(${BZIP_INCLUDE_DIRS})
  
#  ADD_EXECUTABLE(pbzip ${PBZIP_LIST})
#  target_link_libraries(pbzip ${LIBS} ${BZIP2_LIBRARIES})  
#endif(PBZIP OR All)

if(NQUEEN OR All)
  message(STATUS "Building nqueen...")
  SET(NQUEEN_LIST n_queen/ff/n_queen_ff.cpp)
  ADD_EXECUTABLE(nqueen ${NQUEEN_LIST})
  TARGET_LINK_LIBRARIES(nqueen ff pthread papi) 
endif(NQUEEN OR All)

if(PHASH OR All)
  message(STATUS "Building phash...")
  SET(PHASH_LIST parallel_hash_insert/ff/main.cpp
	  parallel_hash_insert/ff/HashTable.cpp)
  ADD_EXECUTABLE(phash ${PHASH_LIST})
  TARGET_LINK_LIBRARIES(phash ff pthread) 
endif(PHASH OR All)

if(MUTEX OR All)
  message(STATUS "Building mutex...")
  SET(MUTEX_LIST mutex/ff/test_mutex.cpp)
  ADD_EXECUTABLE(mutex ${MUTEX_LIST})
  TARGET_LINK_LIBRARIES(mutex ff pthread) 
endif(MUTEX OR All)

if(FIB OR All)
  message(STATUS "Building mutex...")
  SET(FIB_LIST fibonacci/ff/fib.cpp)
  ADD_EXECUTABLE(fib ${FIB_LIST})
  TARGET_LINK_LIBRARIES(fib ff pthread papi) 
endif(FIB OR All)
