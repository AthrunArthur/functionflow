PROJECT(FF_BENCHMARK)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
MESSAGE(STATUS "This is BINARY dir" ${PROJECT_BINARY_DIR})
MESSAGE(STATUS "This is SOURCE dir" ${PROJECT_SOURCE_DIR})
add_definitions(-std=c++11)

#add_definitions(-DUSING_FF_NONBLOCKING_QUEUE)
#add_definitions(-DUSING_LOCK_FREE_QUEUE)
add_definitions(-DUSING_WORK_STEALING_QUEUE)
#add_definitions(-DUSING_MIMO_QUEUE)
#add_definitions(-DUSING_FF_SPIN_STEAL_QUEUE)

set(FF_LIBS ff pthread)
set(TBB_LIBS )
set(OPENMP_LIBS -fopenmp)

if(Debug)
  add_definitions(-g)
  message(STATUS "This is a Debug version!")
  add_definitions(-g)
  add_definitions(-DFUNCTION_FLOW_DEBUG)
  add_definitions(-DTBB_USE_DEBUG)
  set(TBB_LIBS ${TBB_LIBS} tbb_debug)
  include_directories(${PROJECT_SOURCE_DIR}/../libs)
else(Debug)
  message(STATUS "This is a Release version!")
  add_definitions(-g)
  add_definitions(-O2)
  add_definitions(-DNDEBUG)
  add_definitions(-finline-functions)
  set(TBB_LIBS ${TBB_LIBS} tbb)
endif(Debug)

include_directories(${PROJECT_SOURCE_DIR}/../ff/include)		
include_directories(${PROJECT_SOURCE_DIR}/utils)
set(LIBS_LINK_DIRS ${PROJECT_SOURCE_DIR}/../bin)
link_directories(${LIBS_LINK_DIRS})

add_library(util utils/rrecord.cpp utils/parameter_parser.cpp utils/cache_eval.cpp)
set(COMMON_LIBS util)

add_library(utiltbb utils/initial_tbb.cpp)
add_library(utilff utils/initial_ff.cpp)
add_library(utilopenmp utils/initial_openmp.cpp)
add_dependencies(util utiltbb utilff utilopenmp)

set(FF_LIBS ${FF_LIBS} utilff)
set(TBB_LIBS ${TBB_LIBS} utiltbb)
set(OPENMP_LIBS ${OPENMP_LIBS} utilopenmp)

add_custom_target(FF)
add_custom_target(TBB)
add_custom_target(OPENMP)
add_custom_target(FFREUSE)

if(CACHE_EVAL)
  add_definitions(-DCACHE_EVAL)
  SET(COMMON_LIBS ${COMMON_LIBS} papi)
endif(CACHE_EVAL)
set(CMAKE_BINARY_DIR ${PROJECT_BINARY_DIR})
set(BINARY_OUTPUT_PATH ${PROJECT_BINARY_DIR})


add_subdirectory(LU)
add_subdirectory(quick_sort)
add_subdirectory(canny)
#find_package(wxWidgets COMPONENTS core base REQUIRED)

add_subdirectory(kmeans)

#add_subdirectory(pbzip)
add_subdirectory(n_queen)
#add_subdirectory(parallel_hash_insert)
#add_subdirectory(mutex)
add_subdirectory(fibonacci)
add_subdirectory(scluster)
